from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.database.requests import get_categories, get_items_by_category # db(sqlite for now)
from app.database.requests import get_cart_item_qty # redis
from app.settings.messages import reviews_channel, main_channel


menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥ ‚ú®", callback_data="catalog")],
    [InlineKeyboardButton(text="–û –Ω–∞—Å", callback_data="about")]
])

about_us = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="–ù–∞—à –∫–∞–Ω–∞–ª ü™Ñ", url=main_channel),
        InlineKeyboardButton(text="–û—Ç–∑—ã–≤—ã üìó", url=reviews_channel)
     ]
])

async def categories_kb():
    all_categories = await get_categories()
    kb = InlineKeyboardBuilder()
    for category in all_categories:
        print(category.name)
        kb.row(InlineKeyboardButton(text=category.name, callback_data=f"category_{category.id}"))
    kb.row(InlineKeyboardButton(text="–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="main_menu"))
    return kb.as_markup()


async def items_kb(user_id: int, category_id: int):
    """–†–∏—Å—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏."""
    category_items = await get_items_by_category(category_id)
    kb = InlineKeyboardBuilder()
    for item in category_items:
        # –ò—â–µ–º –≤ redis –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (0 - –µ—Å–ª–∏ –Ω–µ—Ç)
        # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º "–¢–æ–≤–∞—Ä (x–ö–æ–ª-–≤–æ)" –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω —Ö–æ—Ç—å —Ä–∞–∑
        count = await get_cart_item_qty(user_id, item.id)
        if count > 0:
            button_text = f"{item.name} (x{count})" # –¢–æ–≤–∞—Ä (x–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞)
        else:
            button_text = item.name

        kb.row(InlineKeyboardButton(
            text=button_text,
            callback_data=f"add_item_{category_id}_{item.id}"
        ))

    # –ü–µ—Ä–µ–¥–∞–µ–º category_id, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    kb.row(InlineKeyboardButton(
        text="üóë –°–±—Ä–æ—Å–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É",
        callback_data=f"reset_cart_category_{category_id}"
        )
    )

    kb.row(
        InlineKeyboardButton(text="üè†–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="catalog"),
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="create_order")
    )
    return kb.as_markup()


async def reset_items_count(markup: InlineKeyboardMarkup) -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –±–µ–∑ —Å—á–µ—Ç—á–∏–∫–æ–≤ –≤–æ–∑–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.
    Input: Item (x1)
    Output: Item
    """
    new_kb = InlineKeyboardMarkup(inline_keyboard=[])
    for row in markup.inline_keyboard:
        new_row = []
        for button in row:
            new_text = button.text.split(" (x")[0] if "(x" in button.text else button.text
            new_button = InlineKeyboardButton(
                text=new_text,
                callback_data=button.callback_data,
                url=button.url
            )
            new_row.append(new_button)
        new_kb.inline_keyboard.append(new_row)
    return new_kb
